name: Build and Deploy

on:
  push:
#    branches: [ "main" ]
    tags:   [ "v*" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build-push:
    runs-on: ubuntu-latest
    outputs:
      image: ${{ steps.set-image.outputs.image }}
      direct-value: "direct-test-value"

    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Init scripts
        run: make init

      - name: Determine & expose IMAGE
        id: set-image
        run: |
          # Capture the output more explicitly to avoid any extra output
          IMG=$(make --quiet print-image | tr -d '\n')
          
          # Debug - Print the value we're capturing
          echo "Captured image value: $IMG"
          
          # Set the output
          echo "image=$IMG" >> "$GITHUB_OUTPUT"
          
          # Debug - Print what was actually set in the output
          echo "GITHUB_OUTPUT content after setting image:"
          cat $GITHUB_OUTPUT

      - name: Build
        run: make build IMAGE=${{ steps.set-image.outputs.image }}

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ vars.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Push
        run: make push IMAGE=${{ steps.set-image.outputs.image }}

  deploy:
    needs: build-push
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')

    steps:
      - name: Checkout (for k8s manifests)
        uses: actions/checkout@v3

      - name: Debug - Show all outputs from build-push job
        run: |
          echo "All outputs from build-push job: ${{ toJSON(needs.build-push.outputs) }}"

      - name: Show IMAGE that we'll deploy
        env:
          IMAGE: ${{ needs.build-push.outputs.image }}
        run: |
          echo "‚Üí ENV: IMAGE $IMAGE"
          if [ -z "$IMAGE" ]; then
            echo "ERROR: IMAGE is empty!"
            exit 1
          fi

      - name: Install doctl
        uses: digitalocean/action-doctl@v2
        with:
          token: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}

      - name: Save DO kubeconfig
        run: doctl kubernetes cluster kubeconfig save --expiry-seconds 600 qwake-k8s-cluster

      - name: Deploy to Kubernetes
        env:
          IMAGE: ${{ needs.build-push.outputs.image }}
        run: |
          echo "‚Üí make deploy using IMAGE=$IMAGE"
          make deploy IMAGE=$IMAGE

      - name: Verify rollout
        run: kubectl rollout status deployment/alethic-ism-api-deployment -n alethic

      # This step generates a changelog and creates a GitHub release
      - name: Generate changelog
        id: changelog
        env:
          GITHUB_TAG: ${{ github.ref_name }}
        run: |
          # find the previous tag
          PREV_TAG=$(git describe --tags --abbrev=0 HEAD^)
          echo "Generating changelog from $PREV_TAG to $GITHUB_TAG"
          
          # build a bullet-list of commit messages
          echo "CHANGELOG<<EOF" >> $GITHUB_OUTPUT
          git log $PREV_TAG..$GITHUB_TAG --pretty=format:'- %s' >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Create GitHub Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name:    ${{ github.ref_name }}
          release_name: Release ${{ github.ref_name }}
          body: |
            ## üìù Changelog
            ${{ steps.changelog.outputs.CHANGELOG }}
          draft: false
          prerelease: false